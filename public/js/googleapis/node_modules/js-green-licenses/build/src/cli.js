#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var argparse_1 = require("argparse");
var checker_1 = require("./checker");
var version = require('../../package.json').version;
var argParser = new argparse_1.ArgumentParser({
    version: version,
    addHelp: true,
    description: 'License checker for npm modules',
});
argParser.addArgument(['package'], {
    help: 'Package name to check license for. ' +
        'Can include version spec after @. E.g. foo@^1.2.3. Otherwise latest.',
    metavar: '<package or package@version>',
    type: 'string',
    nargs: '?',
});
argParser.addArgument(['--local', '-l'], {
    help: 'Check a local directory instead of public npm.',
    metavar: '<directory>',
    type: 'string',
    nargs: 1,
});
argParser.addArgument(['--pr'], {
    help: 'Check a github pull request. Must be <owner>/<repo>/pull/<id>',
    metavar: '<github PR>',
    type: 'string',
    nargs: 1,
});
argParser.addArgument(['--dev'], {
    help: 'Also check devDependencies.',
    nargs: 0,
});
argParser.addArgument(['--verbose'], {
    help: 'Verbose error outputs.',
    nargs: 0,
});
var args = argParser.parseArgs();
function main() {
    return __awaiter(this, void 0, void 0, function () {
        var checker, _a, repo, prId, mergeCommitSha;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    checker = new checker_1.LicenseChecker({ dev: !!args.dev, verbose: !!args.verbose });
                    checker.setDefaultHandlers();
                    if (!args.local) return [3 /*break*/, 2];
                    return [4 /*yield*/, checker.checkLocalDirectory(args.local[0])];
                case 1:
                    _b.sent();
                    return [3 /*break*/, 8];
                case 2:
                    if (!args.pr) return [3 /*break*/, 5];
                    _a = checker.prPathToGitHubRepoAndId(args.pr[0]), repo = _a.repo, prId = _a.prId;
                    return [4 /*yield*/, repo.getPRCommits(prId)];
                case 3:
                    mergeCommitSha = (_b.sent()).mergeCommitSha;
                    return [4 /*yield*/, checker.checkGitHubPR(repo, mergeCommitSha)];
                case 4:
                    _b.sent();
                    return [3 /*break*/, 8];
                case 5:
                    if (!args.package) return [3 /*break*/, 7];
                    return [4 /*yield*/, checker.checkRemotePackage(args.package)];
                case 6:
                    _b.sent();
                    return [3 /*break*/, 8];
                case 7: throw new Error('Package name, --local, or --pr must be given');
                case 8: return [2 /*return*/];
            }
        });
    });
}
main().catch(function (err) {
    console.error(err);
});
//# sourceMappingURL=cli.js.map