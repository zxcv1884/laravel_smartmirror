"use strict";
// Copyright 2017 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
// Abstractions over GitHub REST API v3 and related features. For GitHub API,
// see https://developer.github.com/v3/.
var axios_1 = require("axios");
var path_1 = require("path");
var url_1 = require("url");
function isSingleResponseData(respData) {
    return !Array.isArray(respData);
}
function ensureSingleResponseData(respData) {
    if (!isSingleResponseData(respData)) {
        throw new Error('Expected a single response, got multiple.');
    }
    return respData;
}
var GitHubRepository = /** @class */ (function () {
    function GitHubRepository(owner, repo) {
        this.pathPrefix = path_1.posix.join('/repos', owner, repo);
    }
    GitHubRepository.prototype.getAxiosConfig = function (authToken) {
        return authToken ? { headers: { 'Authorization': "token " + authToken } } : {};
    };
    GitHubRepository.prototype.apiGet = function (path, params) {
        return __awaiter(this, void 0, void 0, function () {
            var url, resp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = url_1.parse('https://api.github.com', true);
                        url.pathname = path_1.posix.join(this.pathPrefix, path);
                        if (params) {
                            url.query = params;
                        }
                        return [4 /*yield*/, axios_1.default.get(url_1.format(url), this.getAxiosConfig())];
                    case 1:
                        resp = _a.sent();
                        return [2 /*return*/, resp.data];
                }
            });
        });
    };
    GitHubRepository.prototype.apiPost = function (path, body) {
        return __awaiter(this, void 0, void 0, function () {
            var url, resp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = url_1.parse('https://api.github.com');
                        url.pathname = path_1.posix.join(this.pathPrefix, path);
                        return [4 /*yield*/, axios_1.default.post(url_1.format(url), body, this.getAxiosConfig())];
                    case 1:
                        resp = _a.sent();
                        return [2 /*return*/, resp.data];
                }
            });
        });
    };
    GitHubRepository.prototype.getPRCommits = function (prId, attemptCount) {
        if (attemptCount === void 0) { attemptCount = 1; }
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var answer, mergeCommitSha, headCommitSha;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.apiGet(path_1.posix.join('pulls', prId.toString()))];
                    case 1:
                        answer = _a.sent();
                        answer = ensureSingleResponseData(answer);
                        if (answer.mergeable == null) {
                            if (attemptCount > GitHubRepository.MAX_PR_COMMIT_RETRIES) {
                                throw new Error("Tried " + attemptCount + " times but the mergeable field is not set. Giving up");
                            }
                            console.log('The `mergeable` field is not set yet. Will retry later.');
                            return [2 /*return*/, new Promise(function (resolve) {
                                    setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                                        var _a;
                                        return __generator(this, function (_b) {
                                            switch (_b.label) {
                                                case 0:
                                                    _a = resolve;
                                                    return [4 /*yield*/, this.getPRCommits(prId, attemptCount + 1)];
                                                case 1:
                                                    _a.apply(void 0, [_b.sent()]);
                                                    return [2 /*return*/];
                                            }
                                        });
                                    }); }, 1000);
                                })];
                        }
                        else if (!answer.mergeable) {
                            throw new Error('PR is not mergeable');
                        }
                        mergeCommitSha = answer.merge_commit_sha;
                        if (!mergeCommitSha) {
                            throw new Error('Merge commit SHA is not found');
                        }
                        headCommitSha = answer.head && answer.head.sha;
                        if (!headCommitSha) {
                            throw new Error('HEAD commit SHA is not found');
                        }
                        return [2 /*return*/, { mergeCommitSha: mergeCommitSha, headCommitSha: headCommitSha }];
                }
            });
        });
    };
    GitHubRepository.prototype.createPRReview = function (prId, commitSha, body) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.apiPost(path_1.posix.join('pulls', prId.toString(), 'reviews'), { commit_id: commitSha, body: body, event: 'COMMENT' })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    GitHubRepository.prototype.setCommitStatus = function (commitSha, status, description, context) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.apiPost(path_1.posix.join('statuses', commitSha), { state: status, description: description, context: context })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    GitHubRepository.prototype.getFileContent = function (commitSha, path) {
        return __awaiter(this, void 0, void 0, function () {
            var answer, _a, content;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.apiGet(path_1.posix.join('contents', path), { ref: commitSha })];
                    case 1:
                        answer =
                            _b.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        _a = _b.sent();
                        return [2 /*return*/, null];
                    case 3:
                        answer = ensureSingleResponseData(answer);
                        if (answer.content === undefined) {
                            throw new Error("Content of " + path + " not found");
                        }
                        content = Buffer.from(answer.content, 'base64').toString();
                        return [2 /*return*/, content];
                }
            });
        });
    };
    GitHubRepository.prototype.getSinglePackageJson = function (dir, commitSha) {
        return __awaiter(this, void 0, void 0, function () {
            var content, filePath;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getFileContent(commitSha, path_1.posix.join(dir, 'package.json'))];
                    case 1:
                        content = _a.sent();
                        if (!content) {
                            return [2 /*return*/, null];
                        }
                        filePath = path_1.posix.join('/', dir, 'package.json');
                        return [2 /*return*/, { filePath: filePath, content: content }];
                }
            });
        });
    };
    GitHubRepository.prototype.getPackageJsonFiles = function (commitSha) {
        return __awaiter(this, void 0, void 0, function () {
            var packageJsons, pj, answer, _a, _i, answer_1, entry, pj_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        packageJsons = [];
                        return [4 /*yield*/, this.getSinglePackageJson('', commitSha)];
                    case 1:
                        pj = _b.sent();
                        if (pj !== null) {
                            packageJsons.push(pj);
                        }
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, this.apiGet('contents/packages', { ref: commitSha })];
                    case 3:
                        answer = _b.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        _a = _b.sent();
                        // Not a monorepo. Return just the top-level package.json.
                        return [2 /*return*/, packageJsons];
                    case 5:
                        if (!!isSingleResponseData(answer)) return [3 /*break*/, 9];
                        _i = 0, answer_1 = answer;
                        _b.label = 6;
                    case 6:
                        if (!(_i < answer_1.length)) return [3 /*break*/, 9];
                        entry = answer_1[_i];
                        if (!(entry.type === 'dir' && entry.name)) return [3 /*break*/, 8];
                        return [4 /*yield*/, this.getSinglePackageJson(path_1.posix.join('packages', entry.name), commitSha)];
                    case 7:
                        pj_1 = _b.sent();
                        if (pj_1 !== null) {
                            packageJsons.push(pj_1);
                        }
                        _b.label = 8;
                    case 8:
                        _i++;
                        return [3 /*break*/, 6];
                    case 9: return [2 /*return*/, packageJsons];
                }
            });
        });
    };
    // How many times to retry PR commit retrieval until giving up.
    GitHubRepository.MAX_PR_COMMIT_RETRIES = 10;
    return GitHubRepository;
}());
exports.GitHubRepository = GitHubRepository;
//# sourceMappingURL=github.js.map