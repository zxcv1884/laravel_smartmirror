"use strict";
// Copyright 2017 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var fs = require("fs");
var npmPackageArg = require("npm-package-arg");
var path = require("path");
var pify = require("pify");
var util_1 = require("util");
var config = require("./config");
var github_1 = require("./github");
var package_json_file_1 = require("./package-json-file");
var packageJson = require("package-json");
var spdxCorrect = require("spdx-correct");
var spdxSatisfies = require("spdx-satisfies");
var github_2 = require("./github");
exports.GitHubRepository = github_2.GitHubRepository;
var fsAccess = pify(fs.access);
var fsReadDir = pify(fs.readdir);
var fsReadFile = pify(fs.readFile);
// Valid license IDs defined in https://spdx.org/licenses/ must be used whenever
// possible. When adding new licenses, please consult the relevant documents.
var DEFAULT_GREEN_LICENSES = [
    'AFL-2.1', 'AFL-3.0', 'APSL-2.0', 'Apache-1.1', 'Apache-2.0',
    'Artistic-1.0', 'Artistic-2.0', 'BSD-2-Clause', 'BSD-3-Clause', 'BSL-1.0',
    'CC-BY-1.0', 'CC-BY-2.0', 'CC-BY-2.5', 'CC-BY-3.0', 'CC-BY-4.0',
    'CC0-1.0', 'CDDL-1.0', 'CDDL-1.1', 'CPL-1.0', 'EPL-1.0',
    'FTL', 'IPL-1.0', 'ISC', 'LGPL-2.0', 'LGPL-2.1',
    'LGPL-3.0', 'LPL-1.02', 'MIT', 'MPL-1.0', 'MPL-1.1',
    'MPL-2.0', 'MS-PL', 'NCSA', 'OpenSSL', 'PHP-3.0',
    'Ruby', 'Unlicense', 'W3C', 'Xnet', 'ZPL-2.0',
    'Zend-2.0', 'Zlib', 'libtiff',
];
var LicenseChecker = /** @class */ (function (_super) {
    __extends(LicenseChecker, _super);
    function LicenseChecker(_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.dev, dev = _c === void 0 ? false : _c, _d = _b.verbose, verbose = _d === void 0 ? false : _d;
        var _this = _super.call(this) || this;
        // Cache for packageName@version's that are already processed.
        _this.processedPackages = new Set();
        // Cache for packageName@version's that failed for fetching.
        _this.failedPackages = new Set();
        _this.config = {};
        // Licenses in this expression must be valid license IDs defined in
        // https://spdx.org/licenses/.
        _this.greenLicenseExpr = '';
        // List of license names that are not SPDX-conforming IDs but are allowed.
        _this.whitelistedLicenses = [];
        _this.opts = { dev: dev, verbose: verbose };
        return _this;
    }
    // tslint:disable-next-line:no-any `EventEmitter` uses ...args: any[]
    LicenseChecker.prototype.on = function (event, listener) {
        return _super.prototype.on.call(this, event, listener);
    };
    // tslint:disable-next-line:no-any `EventEmitter` uses ...args: any[]
    LicenseChecker.prototype.emit = function (event) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return _super.prototype.emit.apply(this, [event].concat(args));
    };
    LicenseChecker.prototype.init = function (cfg) {
        this.config = cfg || {};
        var greenLicenses = this.config.greenLicenses || DEFAULT_GREEN_LICENSES;
        var validGreenLicenses = [];
        var invalidGreenLicenses = [];
        for (var _i = 0, greenLicenses_1 = greenLicenses; _i < greenLicenses_1.length; _i++) {
            var license = greenLicenses_1[_i];
            var corrected = this.correctLicenseName(license);
            if (corrected) {
                validGreenLicenses.push(corrected);
            }
            else {
                invalidGreenLicenses.push(license);
            }
        }
        this.greenLicenseExpr = "(" + validGreenLicenses.join(' OR ') + ")";
        this.whitelistedLicenses = invalidGreenLicenses;
        this.processedPackages.clear();
        this.failedPackages.clear();
    };
    LicenseChecker.prototype.getLicense = function (pkgJson) {
        // Some package.json files have incorrect license fields, and old packages
        // may have legacy licence field format. See
        // https://docs.npmjs.com/files/package.json#license for details. The code
        // below is a little complicated to deal with those cases.
        var license = pkgJson.license || pkgJson.licenses;
        if (!license)
            return null;
        if (typeof license === 'string')
            return license;
        if (Array.isArray(license)) {
            var types = license.map(function (x) { return x.type; }).filter(function (x) { return !!x; });
            return types.length === 1 ? types[0] : "(" + types.join(' OR ') + ")";
        }
        return license.type || null;
    };
    LicenseChecker.prototype.correctLicenseName = function (license) {
        var corrected = spdxCorrect(license);
        if (this.opts.verbose && corrected && corrected !== license) {
            console.warn("Correcting " + license + " to " + corrected);
        }
        return corrected;
    };
    LicenseChecker.prototype.isPackageWhitelisted = function (packageName) {
        return !!this.config.packageWhitelist &&
            this.config.packageWhitelist.some(function (p) { return p === packageName; });
    };
    LicenseChecker.prototype.isGreenLicense = function (license) {
        if (!license)
            return false;
        var correctedName = this.correctLicenseName(license);
        // `license` is not a valid or correctable SPDX id. Check the whitelist.
        if (!correctedName) {
            return this.whitelistedLicenses.some(function (l) { return l === license; });
        }
        try {
            return spdxSatisfies(correctedName, this.greenLicenseExpr);
        }
        catch (err) {
            // Most likely because license is not recognized. Just return false.
            if (this.opts.verbose) {
                console.error(err.message || err);
            }
            return false;
        }
    };
    LicenseChecker.prototype.checkLicenses = function (packageName, versionSpec) {
        var parents = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            parents[_i - 2] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var spec, json, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        spec = packageName + "@" + versionSpec;
                        if (this.failedPackages.has(spec))
                            return [2 /*return*/];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, packageJson(packageName, { version: versionSpec, fullMetadata: true })];
                    case 2:
                        json = _a.sent();
                        return [4 /*yield*/, this.checkPackageJson.apply(this, [json, packageName].concat(parents))];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        err_1 = _a.sent();
                        this.failedPackages.add(spec);
                        this.emit('error', {
                            err: err_1,
                            packageName: packageName,
                            versionSpec: versionSpec,
                            parentPackages: parents,
                        });
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    LicenseChecker.prototype.checkLicensesForDeps = function (deps) {
        var parents = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            parents[_i - 1] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, pkg, depVersion;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!deps)
                            return [2 /*return*/];
                        _a = 0, _b = Object.keys(deps);
                        _c.label = 1;
                    case 1:
                        if (!(_a < _b.length)) return [3 /*break*/, 4];
                        pkg = _b[_a];
                        depVersion = deps[pkg];
                        return [4 /*yield*/, this.checkLicenses.apply(this, [pkg, depVersion].concat(parents))];
                    case 2:
                        _c.sent();
                        _c.label = 3;
                    case 3:
                        _a++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    LicenseChecker.prototype.checkPackageJson = function (json, packageName) {
        var parents = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            parents[_i - 2] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var pj, pkgVersion, packageAndVersion, license;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        pj = package_json_file_1.ensurePackageJson(json);
                        if (!packageName) {
                            packageName = pj.name;
                        }
                        if (pj.name !== packageName) {
                            console.warn("Package name mismatch. Expected " + packageName + ", but got " + pj.name);
                        }
                        pkgVersion = pj.version;
                        packageAndVersion = packageName + "@" + pkgVersion;
                        if (this.processedPackages.has(packageAndVersion))
                            return [2 /*return*/];
                        this.processedPackages.add(packageAndVersion);
                        if (this.isPackageWhitelisted(packageName)) {
                            console.log(packageName + " is whitelisted.");
                        }
                        else {
                            license = this.getLicense(pj);
                            if (!this.isGreenLicense(license)) {
                                this.emit('non-green-license', {
                                    packageName: packageName,
                                    version: pkgVersion,
                                    licenseName: license,
                                    parentPackages: parents,
                                });
                            }
                        }
                        return [4 /*yield*/, this.checkLicensesForDeps.apply(this, [pj.dependencies].concat(parents, [packageAndVersion]))];
                    case 1:
                        _a.sent();
                        if (!this.opts.dev) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.checkLicensesForDeps.apply(this, [pj.devDependencies].concat(parents, [packageAndVersion]))];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    LicenseChecker.prototype.checkPackageJsonContent = function (content) {
        return __awaiter(this, void 0, void 0, function () {
            var json, err_2, packageName, versionSpec;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        json = null;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        json = JSON.parse(content);
                        return [4 /*yield*/, this.checkPackageJson(json, json.name)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_2 = _a.sent();
                        packageName = (json && json.name) || '(unknown package)';
                        versionSpec = (json && json.version) || '(unknown version)';
                        this.emit('error', {
                            err: err_2,
                            packageName: packageName,
                            versionSpec: versionSpec,
                            parentPackages: [],
                        });
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    LicenseChecker.prototype.getLocalPackageJsonFiles = function (directory) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var packageJsons, addPackageJson, packages, subpackages, _i, subpackages_1, dir, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        packageJsons = [];
                        addPackageJson = function (dir) { return __awaiter(_this, void 0, void 0, function () {
                            var pj, _a;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        _b.trys.push([0, 2, , 3]);
                                        pj = path.join(dir, 'package.json');
                                        return [4 /*yield*/, fsAccess(pj)];
                                    case 1:
                                        _b.sent();
                                        packageJsons.push(pj);
                                        return [3 /*break*/, 3];
                                    case 2:
                                        _a = _b.sent();
                                        return [3 /*break*/, 3];
                                    case 3: return [2 /*return*/];
                                }
                            });
                        }); };
                        // Find the top-level package.json first.
                        return [4 /*yield*/, addPackageJson(directory)];
                    case 1:
                        // Find the top-level package.json first.
                        _b.sent();
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 8, , 9]);
                        packages = path.join(directory, 'packages');
                        return [4 /*yield*/, fsReadDir(packages)];
                    case 3:
                        subpackages = _b.sent();
                        _i = 0, subpackages_1 = subpackages;
                        _b.label = 4;
                    case 4:
                        if (!(_i < subpackages_1.length)) return [3 /*break*/, 7];
                        dir = subpackages_1[_i];
                        return [4 /*yield*/, addPackageJson(path.join(packages, dir))];
                    case 5:
                        _b.sent();
                        _b.label = 6;
                    case 6:
                        _i++;
                        return [3 /*break*/, 4];
                    case 7: return [3 /*break*/, 9];
                    case 8:
                        _a = _b.sent();
                        return [3 /*break*/, 9];
                    case 9: return [2 /*return*/, packageJsons];
                }
            });
        });
    };
    LicenseChecker.prototype.checkLocalDirectory = function (directory) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, packageJsons, _i, packageJsons_1, pj, content;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.init;
                        return [4 /*yield*/, config.getLocalConfig(directory)];
                    case 1:
                        _a.apply(this, [_b.sent()]);
                        return [4 /*yield*/, this.getLocalPackageJsonFiles(directory)];
                    case 2:
                        packageJsons = _b.sent();
                        if (packageJsons.length === 0) {
                            console.log('No package.json files have been found.');
                        }
                        _i = 0, packageJsons_1 = packageJsons;
                        _b.label = 3;
                    case 3:
                        if (!(_i < packageJsons_1.length)) return [3 /*break*/, 7];
                        pj = packageJsons_1[_i];
                        this.emit('package.json', pj);
                        return [4 /*yield*/, fsReadFile(pj, 'utf8')];
                    case 4:
                        content = _b.sent();
                        return [4 /*yield*/, this.checkPackageJsonContent(content)];
                    case 5:
                        _b.sent();
                        _b.label = 6;
                    case 6:
                        _i++;
                        return [3 /*break*/, 3];
                    case 7:
                        this.emit('end');
                        return [2 /*return*/];
                }
            });
        });
    };
    LicenseChecker.prototype.checkRemotePackage = function (pkg) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, pkgArgs, pkgType;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        // For checking remote packages, use config file in the current directory.
                        _a = this.init;
                        return [4 /*yield*/, config.getLocalConfig(process.cwd())];
                    case 1:
                        // For checking remote packages, use config file in the current directory.
                        _a.apply(this, [_b.sent()]);
                        pkgArgs = npmPackageArg(pkg);
                        pkgType = pkgArgs.type;
                        if (!['tag', 'version', 'range'].some(function (type) { return type === pkgType; })) {
                            throw new Error("Unsupported package spec: " + pkg);
                        }
                        if (!pkgArgs.name || !pkgArgs.fetchSpec) {
                            throw new Error("Invalid package spec: " + pkg);
                        }
                        return [4 /*yield*/, this.checkLicenses(pkgArgs.name, pkgArgs.fetchSpec)];
                    case 2:
                        _b.sent();
                        this.emit('end');
                        return [2 /*return*/];
                }
            });
        });
    };
    /** @param prPath Must be in a form of <owner>/<repo>/pull/<id>. */
    LicenseChecker.prototype.prPathToGitHubRepoAndId = function (prPath) {
        var regexp = /^([^/]+)\/([^/]+)\/pull\/(\d+)$/;
        var matched = regexp.exec(prPath);
        if (!matched) {
            throw new Error("Invalid github pull request path: " + prPath + ". " +
                'Must be in the form <owner>/<repo>/pull/<id>.');
        }
        var owner = matched[1], repoName = matched[2], prId = matched[3];
        return { repo: new github_1.GitHubRepository(owner, repoName), prId: Number(prId) };
    };
    LicenseChecker.prototype.checkGitHubPR = function (repo, mergeCommitSha) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, packageJsons, _i, packageJsons_2, pj;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.init;
                        return [4 /*yield*/, config.getGitHubConfig(repo, mergeCommitSha)];
                    case 1:
                        _a.apply(this, [_b.sent()]);
                        return [4 /*yield*/, repo.getPackageJsonFiles(mergeCommitSha)];
                    case 2:
                        packageJsons = _b.sent();
                        if (packageJsons.length === 0) {
                            console.log('No package.json files have been found.');
                        }
                        _i = 0, packageJsons_2 = packageJsons;
                        _b.label = 3;
                    case 3:
                        if (!(_i < packageJsons_2.length)) return [3 /*break*/, 6];
                        pj = packageJsons_2[_i];
                        this.emit('package.json', pj.filePath);
                        return [4 /*yield*/, this.checkPackageJsonContent(pj.content)];
                    case 4:
                        _b.sent();
                        _b.label = 5;
                    case 5:
                        _i++;
                        return [3 /*break*/, 3];
                    case 6:
                        this.emit('end');
                        return [2 /*return*/];
                }
            });
        });
    };
    /** set default event handlers for CLI output. */
    LicenseChecker.prototype.setDefaultHandlers = function () {
        var nonGreenCount = 0;
        var errorCount = 0;
        this.on('non-green-license', function (_a) {
            var packageName = _a.packageName, version = _a.version, licenseName = _a.licenseName, parentPackages = _a.parentPackages;
            nonGreenCount++;
            var licenseDisplay = licenseName || '(no license)';
            var packageAndVersion = packageName + "@" + version;
            console.log(licenseDisplay + ": " + packageAndVersion);
            console.log("  " + parentPackages.concat([packageAndVersion]).join(' -> '));
            console.log();
        })
            .on('package.json', function (filePath) {
            console.log("Checking " + filePath + "...");
            console.log();
        })
            .on('error', function (_a) {
            var err = _a.err, packageName = _a.packageName, versionSpec = _a.versionSpec, parentPackages = _a.parentPackages;
            errorCount++;
            var packageAndVersion = packageName + "@" + versionSpec;
            console.log("Error while checking " + packageAndVersion + ":");
            console.log("  " + parentPackages.concat([packageAndVersion]).join(' -> '));
            console.log();
            console.log("" + util_1.inspect(err));
            console.log();
        })
            .on('end', function () {
            if (nonGreenCount > 0 || errorCount > 0) {
                process.exitCode = 1;
                if (nonGreenCount > 0) {
                    console.log(nonGreenCount + " non-green licenses found.");
                }
                if (errorCount > 0) {
                    console.log(errorCount + " errors found.");
                }
            }
            else {
                console.log('All green!');
            }
        });
    };
    return LicenseChecker;
}(events_1.EventEmitter));
exports.LicenseChecker = LicenseChecker;
//# sourceMappingURL=checker.js.map